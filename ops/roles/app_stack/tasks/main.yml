---
- name: List Cognito Identity Pools
  command: >
    aws cognito-identity
    list-identity-pools
    --max-results 5
  register: identityPoolList

- name: register existing identityPoolName
  shell: 'echo {{ (identityPoolList.stdout | from_json)["IdentityPools"][0]["IdentityPoolName"] }}'
  register: ExistingIdentityPoolName

- name: create Cognito Identity Pool
  command: >
    aws cognito-identity
    create-identity-pool
    --identity-pool-name "{{ identityPoolName }}"
    --allow-unauthenticated-identities
  register: NewIdentityPoolId
  when: ExistingIdentityPoolName.stdout != identityPoolName

- name: register new identityPoolId
  shell: 'echo {{ NewIdentityPoolId }}' # FIXME when creating new pool
  register: ExistingIdentityPoolId
  when: ExistingIdentityPoolName.stdout != identityPoolName

- name: register existing identityPoolId
  shell: 'echo {{ (identityPoolList.stdout | from_json)["IdentityPools"][0]["IdentityPoolId"] }}'
  register: ExistingIdentityPoolId
  when: NewIdentityPoolId["skipped"] == true

- name: ExistingIdentityPoolId.stdout
  debug: msg={{ ExistingIdentityPoolId.stdout }}

# Create or Update Cloudformation Stack

- name: stackParameters
  debug: msg={{ stackParameters }}

- name: setup fda stack
  cloudformation:
    stack_name: "{{ stack_name }}"
    state: "present"
    region: "{{ aws.region }}"
    disable_rollback: false
    template: "roles/app_stack/files/stack_template.json"
    template_parameters: "{{ stackParameters }}"
  register: "fdaStack"

- name: read stack output
  set_fact:
    fda:
    stack_output: "{{ fdaStack.stack_outputs }}"

# Assigne newly created IAM roles to exiting Identity Pool

- name: assign Cognito Identity Pool roles
  command: >
    aws cognito-identity
    set-identity-pool-roles
    --identity-pool-id "{{ ExistingIdentityPoolId.stdout }}"
    --roles "unauthenticated={{ fdaStack.stack_outputs.UnAuthRole }}"
  when: ExistingIdentityPoolName.stdout != identityPoolName

# Compile and upload engine node source to S3

- name: Compile node source
  shell: "zip -r index.zip ./index/"
  args:
    chdir: "../engine/"

# - name: Upload engine source
#   s3:
#     bucket: "{{ stackParameters.BucketName }}"
#     object: "/face-detection-engine/index.zip"
#     src: "../engine/index.zip"
#     mode: "put"

- name: Upload node source
  shell: 'aws s3 cp index.zip s3://{{ stackParameters.BucketName }}/engine/'
  args:
    chdir: "../engine/"
