---
- name: Create Engine bucket
  s3:
    bucket: "{{ EngineBucket }}"
    permission: "public-read"
    region: "{{ aws.region }}"
    mode: "create"

- name: empty the engine directory
  file: path=engine state=absent

- name: create engine directory
  file: path=engine state=directory

- name: copy engine source
  git:
    repo=https://github.com/ricardosllm/fda-engine.git
    dest=engine
    version=master

- name: build engine config
  template:
    src=engine.config.js
    dest=engine/index/config.js

- name: Remove config example
  file: path=engine/index/config.js.example state=absent

- name: Compile node source
  shell: "zip -r index.zip ./index/"
  args:
    chdir: "engine"

- name: Upload node source
  shell: 'aws s3 cp index.zip s3://{{ EngineBucket }}'
  args:
    chdir: "engine"

# Create Identity Pool

- name: List Cognito Identity Pools
  command: >
    aws cognito-identity
    list-identity-pools
    --max-results 5
  register: identityPoolList

- name: register existing identityPoolName
  shell: 'echo {{ (identityPoolList.stdout | from_json)["IdentityPools"][0]["IdentityPoolName"] }}'
  register: ExistingIdentityPoolName

- name: create Cognito Identity Pool
  command: >
    aws cognito-identity
    create-identity-pool
    --identity-pool-name "{{ identityPoolName }}"
    --allow-unauthenticated-identities
  register: NewIdentityPoolId
  when: ExistingIdentityPoolName.stdout != identityPoolName

- name: register new identityPoolId
  shell: 'echo {{ NewIdentityPoolId }}' # FIXME when creating new pool
  register: ExistingIdentityPoolId
  when: ExistingIdentityPoolName.stdout != identityPoolName

- name: register existing identityPoolId
  shell: 'echo {{ (identityPoolList.stdout | from_json)["IdentityPools"][0]["IdentityPoolId"] }}'
  register: ExistingIdentityPoolId
  when: NewIdentityPoolId["skipped"] == true

- name: ExistingIdentityPoolId.stdout
  debug: msg={{ ExistingIdentityPoolId.stdout }}

# Create or Update Cloudformation Stack

- name: stackParameters
  debug: msg={{ stackParameters }}

- name: setup fda stack
  cloudformation:
    stack_name: "{{ stack_name }}"
    state: "present"
    region: "{{ aws.region }}"
    disable_rollback: false
    template: "roles/app_stack/files/stack_template.json"
    template_parameters: "{{ stackParameters }}"
  register: "fdaStack"

- name: read stack output
  debug: msg="{{ fdaStack.stack_outputs }}"

# Assign newly created IAM roles to exiting Identity Pool

- name: assign Cognito Identity Pool roles
  command: >
    aws cognito-identity
    set-identity-pool-roles
    --identity-pool-id "{{ ExistingIdentityPoolId.stdout }}"
    --roles "unauthenticated={{ fdaStack.stack_outputs.UnAuthRole }},
             authenticated={{ fdaStack.stack_outputs.AuthRole }}"
  # when: ExistingIdentityPoolName.stdout != identityPoolName

# Camera App

- name: empty the camera directory
  file: path=camera state=absent

- name: create camera directory
  file: path=camera state=directory

- name: copy camera source
  git:
    repo=https://github.com/ricardosllm/fda-camera.git
    dest=camera
    version=master

- name: build camera config
  template:
    src=camera.config.js
    dest=camera/js/app/config.js

- name: upload camera app
  command: >
    aws s3 sync ./camera s3://{{ MainBucket }}/camera
    --acl "public-read" --exclude "*._*" --exclude ".DS_Store"
    --exclude "*.svg"

- name: upload camera assets
  command: >
    aws s3 sync ./camera s3://{{ MainBucket }}/camera
    --acl "public-read" --exclude "*._*" --exclude ".DS_Store"
    --exclude "*" --include "*.svg" --content-type "image/svg+xml"

- name: Build Main bucket cors config
  template:
    src=cors.json
    dest=camera/cors.json

- name: Upload Main bucket cors config
  command: >
    aws s3api put-bucket-cors --bucket {{ MainBucket }}
    --cors-configuration file://camera/cors.json

# Facewall App

- name: empty the facewall directory
  file: path=facewall state=absent

- name: create facewall directory
  file: path=facewall state=directory

- name: copy facewall source
  git:
    repo=https://github.com/ricardosllm/fda-facewall.git
    dest=facewall
    version=master

- name: build facewall config
  template:
    src=facewall.config.js
    dest=facewall/js/app/config.js

- name: upload facewall app
  command: >
    aws s3 sync ./facewall s3://{{ MainBucket }}/facewall
    --acl "public-read" --exclude "*._*" --exclude ".DS_Store"
    --exclude "*.svg"

- name: upload facewall assets
  command: >
    aws s3 sync ./facewall s3://{{ MainBucket }}/facewall
    --acl "public-read" --exclude "*._*" --exclude ".DS_Store"
    --exclude "*" --include "*.svg" --content-type "image/svg+xml"
